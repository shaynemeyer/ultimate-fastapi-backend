"""add tag

Revision ID: 1c12bdc178a7
Revises: b563796ae6af
Create Date: 2025-09-26 07:18:30.039721

"""

from typing import Sequence, Union

import sqlmodel
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from app.database.models import TagName

# revision identifiers, used by Alembic.
revision: str = "1c12bdc178a7"
down_revision: Union[str, Sequence[str], None] = "b563796ae6af"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.Column(
            "name",
            sa.Enum(
                "EXPRESS",
                "STANDARD",
                "FRAGILE",
                "HEAVY",
                "INTERNATIONAL",
                "DOMESTIC",
                "TEMPERATURE_CONTROLLED",
                "GIFT",
                "RETURN",
                "DOCUMENTS",
                name="tagname",
            ),
            nullable=False,
        ),
        sa.Column("instruction", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "shipment_tag",
        sa.Column("shipment_id", sa.Uuid(), nullable=False),
        sa.Column("tag_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["shipment_id"],
            ["shipment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("shipment_id", "tag_id"),
    )
    # ### end Alembic commands ###
    # Insert entries for each tag type with unique instruction
    op.execute(
        sa.text(
            """
            INSERT INTO tag (id, name, instruction) VALUES
            (gen_random_uuid(), 'EXPRESS', 'Handle with prior - deliver within 24 hours'),
            (gen_random_uuid(), 'STANDARD', 'Regular delivery within 3-5 business days'),
            (gen_random_uuid(), 'FRAGILE', 'Handle with care - contains breakable items'),
            (gen_random_uuid(), 'HEAVY', 'Weight exceeds 20kg - use appropriate equipment'),
            (gen_random_uuid(), 'INTERNATIONAL', 'Package requires customs clearance'),
            (gen_random_uuid(), 'DOMESTIC', 'For delivery within country borders only'),
            (gen_random_uuid(), 'TEMPERATURE_CONTROLLED', 'Keep between 2-8Â°C at all times'),
            (gen_random_uuid(), 'GIFT', 'Contains gift items - handle discreetly'),
            (gen_random_uuid(), 'RETURN', 'Package is being returned to sender'),
            (gen_random_uuid(), 'DOCUMENTS', 'Contains important documents - keep dry')
            """
        )
    )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("shipment_tag")
    op.drop_table("tag")
    # ### end Alembic commands ###
